/*
   RL agent estimates the velocity for each wheel of the romi to go to a waypoint. RL agent is trained using DDPG
   network in Matlab. Only the Actor network is implemented here. The weight matrix represented here are the
   learned paramenter during training.
   Author: Vishnu Hariharan Anand and Juvith Ghosh
*/

#ifndef _RL_AGENT_H_
#define _RL_AGENT_H_

#include "defs.h"
#include <math.h>

float m1[r1][c1] = {{ -0.89917046,  -1.6107701,  1.0554417, 0.015222415, -0.034466390,  -0.00026006359,  0.022002591, 0.17455429},
  {0.72296321,  0.27087229,  -0.41760027, 0.0011230999,  0.032661010, 0.018346962, 0.059453420, -0.015351319},
  {0.36192077,  0.57166529,  0.40742496,  0.038651250, -0.019943152,  0.0041976073,  -0.47426164, -0.40164503},
  { -0.81517434, -1.5198894,  -0.54707146, 0.051734712, -0.068246178,  0.0052040094,  0.21164842,  0.16076459},
  {0.47938961,  1.4307587, 1.3544281, -0.0090854000, 0.098431885, 0.013018592, -0.19095886, -0.012736163},
  {1.3264918, -0.45725775, -0.17527518, -0.0034528777, -0.019806188,  0.017198196, 0.044323992, 0.023113178},
  {0.66237038,  -0.10736836, 2.1551738, 0.024878141, -0.027585920,  -0.012711824,  -0.21243325, -0.061619267},
  { -0.18328018, -0.14076023, -0.21031033, 0.032743353, -0.036282882,  -0.0089508705, -0.24185117, 0.060210731},
  {0.27786997,  -1.4005953,  1.2810237, 0.015919475, -0.028181991,  -0.014433942,  -0.28667915, -0.12323236},
  { -1.0963469,  -0.10683142, 1.0011564, 0.0093379887,  -0.011079038,  0.023121102, -0.33378336, -0.48030931},
  { -0.91511559, 0.94612610,  -1.1002591,  0.040789817, -0.032791302,  0.0087528694, 0.16037638, 0.40592101},
  {2.8637950, -0.59594226, -0.17515735, -0.020311614,  -0.0060059624, 0.0022302242,  0.057081532, -0.021972183},
  { -0.69693100, 0.27227736,  1.0480853, -0.037843201,  0.024068208, 0.019088125, 0.089766547, 0.24958096},
  {0.78152347,  -0.14167586, 0.66457552,  -0.020832412,  0.010632396, 0.015957335, 0.21203366,  0.42055577},
  {0.88469732,  0.75646323,  -0.30511859, 0.011344002, 0.023607504, 0.0081469128,  -0.13203219, -0.043767218},
  {0.77184498,  -0.90349603, -0.42324877, 0.0057787877,  -0.031202326,  0.019446945, -0.39873061, -0.030534063}
};

float m2[r2][c2] = {{ 0.28096461,  -0.70983452, -0.19915059, -0.62369609, -0.25101230, 0.043063682, 0.68184340,  -0.62983251, 0.29153243,  0.32515424,  0.65502262,  0.49903396,  0.47544155,  0.16109665,  -0.35434842, -0.47945791},
  {0.59684938,  -0.15043834, -0.092544392,  0.88544881,  0.14182737,  0.072831608, -0.040571008,  0.020009024, 0.29308018,  -0.13264439, -0.91306442, -0.22154209, -0.37281621, 0.14160123,  -0.65371835, 0.20526569},
  { -1.1769081,  0.90830249,  -0.32728821, -0.34004948, 0.82280636,  0.37573582,  -2.2861066,  -0.017816333,  -0.34736553, -0.12025098, 0.43400753,  1.0092748, 0.10302228,  0.41469368,  0.49515721,  0.48774770},
  {0.041353866, 0.050139613, 0.33705273,  0.30096892,  -0.38815153, -0.86152279, 0.39485407,  0.35694051,  0.0056988006,  0.16483381,  0.32264745,  -1.6475836,  -0.29766661, -0.27863285, 0.34951672,  -0.54956341},
  { -0.071283698,  0.37285790,  0.10155573,  -0.20097367, 0.39256993,  0.25464448,  -0.19849272, -0.18463497, -1.3548150,  -0.96191138, 0.026002295, 0.22757806,  -0.036769636,  -0.040028598,  0.32192329,  0.23312068},
  { -0.036205366,  -0.27006978, -0.17243041, -0.16854604, -0.66678965, -0.17445952, -0.055680901,  0.22626296,  0.36547443,  0.43373373,  0.46180212,  0.31543782,  0.19792357,  0.43016329,  0.36807916,  -0.067390375},
  { -0.28496459, 0.41919491,  0.25592190,  0.090320773, 0.83771318,  0.14959072,  0.30466187,  -0.022941211,  -0.63223994, -0.45808798, 0.044659320, -0.10154773, 0.40857133,  -0.032099303,  -0.015942937,  -0.032170255},
  { -0.013054607,  -0.089134544,  -0.078765258,  -0.047584243,  -0.68389463, -0.17974171, -0.10493310, 0.25112870,  0.35717037,  0.39856750,  0.40005699,  0.14593507,  0.12411297,  0.40187454,  0.29312363,  -0.020332079},
  {0.20309855, 0.10906833,  0.57374638,  0.59566915,  -0.59102291, -0.90157992, 0.67580849,  0.37143320,  -0.081815690,  -0.31350824, 0.99349433,  -1.9428172,  -0.44106567, -0.28894410, 0.55057395,  -0.70896661},
  {0.70088547,  -0.058748998,  -0.12146514, 0.93695235,  0.17473947,  0.14160378,  0.055071823, 0.010215401, 0.26985386,  -0.21799009, -1.0777514,  -0.28679150, -0.44304612, 0.0049297037,  -0.84142637, 0.28122655},
  { -0.83545923, 0.51234424,  0.19055681,  -0.63293862, 1.2925146, 0.35682341,  0.30079433,  0.16639534,  -0.52223170, 0.18019472,  -0.087150857,  -0.33742186, 0.61714202,  0.16742308,  -0.12117679, 0.051695555},
  { -0.18362699, 0.16952574 , -0.18691041, -0.28106415, 0.28613377,  -0.19751512, -0.85984206, -0.059201259,  -0.099343896,  0.011171221, 0.17198791,  -0.092516214,  0.25647825,  0.089046791, 0.036736768, -0.14411604},
  {0.42280757,  -0.72480339, -0.36622027, -0.69632107, -0.011567277,  0.047072981, 0.39500278,  -0.55661345, 0.39534315,  0.42505327,  0.77728617,  0.59560943,  0.49606508,  -0.017528431,  -0.36408424, -0.35532066},
  {0.75082904,  0.48967353 , 0.44309840,  0.77809143,  -0.23751320, 0.51003253,  0.26352367,  0.33600041,  -0.36861733, -0.86286223, -0.076948673,  0.20748879,  -0.51067877, -0.59198391, -0.80459958, 0.70210510},
  { -0.026371615,  -0.26987964, -0.15795128, -0.15334815, -0.68578750, -0.19134344, -0.052738715,  0.24015479,  0.36841428,  0.43442485,  0.46275556,  0.28951201,  0.18702012,  0.43546033,  0.36445814,  -0.077404611},
  {0.025773913, 0.069338702, 0.092953712, -0.27798498, -0.18065880, 0.55780029,  -0.055398241,  -0.15490505, 0.12388467,  -0.48671061, 0.14149509,  0.72319919,  -0.10058995, 0.10960107,  0.079515070, 0.35401157}
};

float m3[r3][c3] = {{1.2942165,  -1.0468096,  0.71326256,  1.5437732, -1.6465858,  1.0142561, -1.3288697,  0.98973078,  1.6574495, -1.3919740,  -1.7879539,  -0.35605714, 1.0191500, -1.7571985,  1.0348535, 0.25997078},
  { -1.3290396,  1.0398763, -2.5288384,  1.1243370, -0.77639228, -0.19210404, 0.11123712,  0.042902887, 1.9694648, 1.0446477, -0.69166678, -1.1002321,  -1.7240072,  1.2528183, -0.15879573, -1.2117965}
};

float b1[r1][1] = {{ -0.038761277}, {0.81436837}, {0.54081398}, {0.65345693}, {0.28347632}, {0.38022912}, { -0.13113499}, {0.75226265}, {0.26184070},
  {0.26649123}, {0.65648592}, {0.21941905}, { -0.38483354}, { -0.25147766}, {0.79106110}, {0.58765602}
};

float b2[r2][1] = {{ -0.35689402}, { -0.12122971}, {0.49817327}, {0.48588622}, {0.19893803}, {0.34984931}, {0.17100160},
  {0.27904543}, {0.44439578}, { -0.12111027}, {0.40751648}, {0.080754466}, { -0.53836840}, {0.25875920}, {0.35139659}, { -0.30053118}
};

float b3[r3][1] = {{0.26216555}, {0.27019566}};

class RLController {
  public:
    vector2f velocity;
    vector2f velocity_old;
    vector2f estimate_velocity(vector3f pose, vector3f destination);
  private:
    float ex = 0, ey = 0, theta = 0, ex_vel = 0, ey_vel = 0, theta_vel = 0, ex_old = 0, ey_old = 0, theta_old = 0;
};

vector2f RLController::estimate_velocity(vector3f pose, vector3f destination) {
  ex = pose.x - destination.x;
  ey = pose.y - destination.y;
  theta = pose.theta;

  ex_vel = ex - ex_old;
  ey_vel = ey - ey_old;
  theta_vel = theta - theta_old;

  float input[c1][1] = {{ ex}, {ey}, {theta}, {ex_vel}, {ey_vel}, {theta_vel}, {velocity_old.left}, {velocity_old.right}};

  int i, k;

  float h1[r1][1]; // Hidden Layer 1
  float h2[r2][1]; // Hidden Layer 2
  float res[r3][1]; // Output {vr, vl) in rad/sec


  //  Serial.print("First Hidden Layer is \n");
  for (i = 0; i < r1; i++) {
    h1[i][0] = b1[i][0];
    for (k = 0; k < c1; k++) {
      h1[i][0] += m1[i][k] * input[k][0];
    }
    if (h1[i][0] < 0) h1[i][0] = 0; // Relu Operation
    //      Serial.print(h1[i][0]);
    //      Serial.print("  ");
  }


  //  Serial.print("Second Hidden Layer is \n");
  for (i = 0; i < r2; i++) {
    h2[i][0] = b2[i][0];
    for (k = 0; k < c2; k++) {
      h2[i][0] += m2[i][k] * h1[k][0];
    }
    if (h2[i][0] < 0) h2[i][0] = 0; // Relu Operation
    //    Serial.print(h2[i][0]);
    //    Serial.print("  ");
  }

  //  Serial.print("Output Layer is \n");
  for (i = 0; i < r3; i++) {
    res[i][0] = b3[i][0];
    for (k = 0; k < c3; k++) {
      res[i][0] += m3[i][k] * h2[k][0];
    }
    res[i][0] = tanh(res[i][0]);
//    Serial.print(res[i][0]);
//    Serial.print("  ");
  }
//  Serial.println();

  velocity.left = res[0][0];
  velocity.right = res[1][0];

  velocity_old.left = velocity.left;
  velocity_old.right = velocity.right;

  ex_old = ex;
  ey_old = ey;
  theta_old = theta;

  return velocity;
}

#endif
